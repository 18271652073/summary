server.servlet.context-path=/summary
server.port=8081
spring.application.name=summary

##第一数据源
#spring.datasource.primary.jdbc-url=jdbc:sqlserver://192.168.99.34:1433;DatabaseName=rsds
#spring.datasource.primary.username=sa
#spring.datasource.primary.password=Deli2017.05.26
#spring.datasource.primary.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
#spring.datasource.primary.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.primary.minimum-idle=1
#spring.datasource.primary.maximum-pool-size=15
#spring.datasource.primary.auto-commit=true
#spring.datasource.primary.idle-timeout=60000
#spring.datasource.primary.pool-name=fang_sqlserver
#spring.datasource.primary.max-lifetime=1800000
#spring.datasource.primary.connection-timeout=30000
#spring.datasource.primary.connection-test-query=SELECT 1
#
##第二数据源
#spring.datasource.secondary.jdbc-url=jdbc:mysql://192.168.99.38:3306/invoice?allowMultiQueries=true&characterEncoding=UTF-8
#spring.datasource.secondary.username=root
#spring.datasource.secondary.password=nbdeli#2018
#spring.datasource.secondary.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.secondary.type=com.zaxxer.hikari.HikariDataSource
#spring.datasource.secondary.minimum-idle=1
#spring.datasource.secondary.maximum-pool-size=15
#spring.datasource.secondary.auto-commit=true
#spring.datasource.secondary.idle-timeout=60000
#spring.datasource.secondary.pool-name=fang_mysql
#spring.datasource.secondary.max-lifetime=1800000
#spring.datasource.secondary.connection-timeout=30000
#spring.datasource.secondary.connection-test-query=SELECT 1

spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://192.168.99.38:3306/bonus?allowMultiQueries=true&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=nbdeli#2018
slave.datasource.names=ds1,ds2
slave.datasource.ds1.jdbc-url=jdbc:mysql://192.168.99.38:3306/invoice?characterEncoding=utf8?useUnicode=true&characterEncoding=utf-8&useSSL=true
slave.datasource.ds1.username=root
slave.datasource.ds1.password=nbdeli#2018
slave.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
slave.datasource.ds2.jdbc-url=jdbc:sqlserver://192.168.99.34:1433
slave.datasource.ds2.username=sa
slave.datasource.ds2.password=Deli2017.05.26
slave.datasource.ds2.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
initialSize=5
minIdle=5
maxActive=20
maxWait=60000
timeBetweenEvictionRunsMillis=60000
minEvictableIdleTimeMillis=300000
#validationQuery=SELECT 1 FROM DUAL
testWhileIdle=true
testOnBorrow=false
testOnReturn=false
poolPreparedStatements=true
maxPoolPreparedStatementPerConnectionSize=20
filters=stat,log4j
connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
spring.redis.jedis.pool.max-active=200
#spring.redis.pool.max-active=200
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=
#spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=10
#spring.redis.pool.max-idle=10
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
#spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=1000

#邮件配置
spring.mail.default-encoding=UTF-8
spring.mail.host=mail.nbdeli.com
#发送者的邮箱密码
spring.mail.password=delideli2019
spring.mail.properties.mail.smtp.ssl.enable=true
spring.mail.properties.mail.imap.ssl.socketFactory.fallback=false
# 本文配置的包所在路径
spring.mail.properties.mail.smtp.ssl.socketFactory.class=com.test.summary.common.component.email.MailSocketFactory
#端口
spring.mail.port=587
#协议
spring.mail.protocol=smtp
#发送者的邮箱账号
spring.mail.username=sc@nbdeli.com
email.to1=huhailin@nbdeli.com
email.to2=lp@nbdeli.com
email.to3=txl@nbdeli.com
email.to4=dkx@nbdeli.com
email.to5=wxw@nbdeli.com
email.to6=jjj@nbdeli.com
email.to7=jty@nbdeli.com
email.to8=yangting@nbdeli.com
email.to9=zhangjingqun@nbdeli.com

jobs.cron.synGitStatistics=0/10 * * * * ?

#热部署生效
spring.devtools.restart.enabled=true
#设置重启的目录，检索目录(resources/static、resources/templates)
spring.devtools.restart.additional-paths=src/main/java
#classpath目录下的WEB-INF文件夹内容修改不重启
#spring.devtools.restart.exclude= WEB-INF/**

#thymeleaf
#默认到resource/templates目录下寻找
spring.thymeleaf.suffix=.html
spring.thymeleaf.check-template-location=true
spring.thymeleaf.encoding=UTF-8
#thymeleaf模板引擎默认是Template modes:HTML5解析的，解析比较严格，对html的内容要求很严格，假如不符合规范，那么就会报错。
#pom内的nekohtml和下面的注解是解决：org.xml.sax.SAXParseException: 元素类型 "meta" 必须由匹配的结束标记 "</meta>" 终止
#将配置改成：LEGACYHTML5
spring.thymeleaf.servlet.content-type=text/html
spring.thymeleaf.cache=false
spring.thymeleaf.mode=LEGACYHTML5
#spring.thymeleaf.mode=HTML5

logging.path=/home/summary
logging.level.com.nbdeli=info
logging.level.org.springframework.boot.autoconfigure=ERROR

#============== kafka ===================
# 指定kafka 代理地址，可以多个
spring.kafka.bootstrap-servers=10.0.21.250:9092
#消费监听接口监听的主题不存在时，默认会报错
spring.kafka.listener.missing-topics-fatal=false
#=============== provider  =======================
spring.kafka.producer.retries=0
# 每次批量发送消息的数量
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#=============== consumer  =======================
# 指定默认消费者group id
spring.kafka.consumer.group-id=productGroup
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=100
# 指定消息key和消息体的编解码方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

# elasticsearch
#\u662f\u5426\u4f7f\u7528es  true\uff1a\u4f7f\u7528   false\uff1a\u4e0d\u4f7f\u7528
elasticsearch.enable=true
elasticsearch.cache.enable=true
elasticsearch.cache.cluster-name=elasticsearch
elasticsearch.cache.cluster-nodes=192.168.120.31:9300,192.168.120.32:9300,192.168.120.29:9300
elasticsearch.cache.client-transport-sniff=false

##nosql\u65e5\u5fd7es\u914d\u7f6e
#elasticsearch.nosql.cluster-name=elasticsearch
#elasticsearch.nosql.cluster-nodes=192.168.120.31:9300,192.168.120.32:9300,192.168.120.29:9300
#elasticsearch.nosql.client-transport-sniff=false
#
##默认即为elasticsearch
#elasticsearch_cluster_name=elasticsearch
##配置es节点信息，逗号分隔，如果没有指定，则启动ClientNode
#elasticsearch_cluster_nodes=192.168.120.29:9300


#文件上传大小为20M
spring.servlet.multipart.max-file-size=400MB
#请求大小为20M
spring.servlet.multipart.max-request-size=1000MB

#spring.application.name=springboot2-nacos-config
nacos.config.server-addr=127.0.0.1:8848
#nacos.discovery.server-addr=192.168.99.38:8848
##nacos.config.server-addr=192.168.137.1:8848
#service.name=summary
#nacos.standalone=true

